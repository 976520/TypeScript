//// [tests/cases/compiler/excessPropertyCheckingInDestructuring.ts] ////

=== excessPropertyCheckingInDestructuring.ts ===
declare function foo<T extends { dataType: 'a' | 'b' }>(template: T): [T, any, any];
>foo : <T extends { dataType: "a" | "b"; }>(template: T) => [T, any, any]
>    : ^ ^^^^^^^^^                        ^^        ^^ ^^^^^             
>dataType : "a" | "b"
>         : ^^^^^^^^^
>template : T
>         : ^

declare function bar(template: { dataType: 'a' | 'b' }): [any, any, any];
>bar : (template: { dataType: "a" | "b"; }) => [any, any, any]
>    : ^        ^^                        ^^^^^               
>template : { dataType: "a" | "b"; }
>         : ^^^^^^^^^^^^         ^^^
>dataType : "a" | "b"
>         : ^^^^^^^^^

// These should work without excess property errors - destructuring contexts
const [, ,] = foo({ dataType: 'a', day: 0 });
> : undefined
> : ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>foo({ dataType: 'a', day: 0 }) : [{ dataType: "a"; day: number; }, any, any]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T extends { dataType: "a" | "b"; }>(template: T) => [T, any, any]
>    : ^ ^^^^^^^^^                        ^^        ^^ ^^^^^             
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

const [, , t] = foo({ dataType: 'a', day: 0 });
> : undefined
> : ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>t : any
>  : ^^^
>foo({ dataType: 'a', day: 0 }) : [{ dataType: "a" | "b"; }, any, any]
>                               : ^^^^^^^^^^^^^         ^^^^^^^^^^^^^^
>foo : <T extends { dataType: "a" | "b"; }>(template: T) => [T, any, any]
>    : ^ ^^^^^^^^^                        ^^        ^^ ^^^^^             
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

const [x, y, z] = foo({ dataType: 'a', day: 0 });
>x : { dataType: "a"; day: number; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>y : any
>  : ^^^
>z : any
>  : ^^^
>foo({ dataType: 'a', day: 0 }) : [{ dataType: "a"; day: number; }, any, any]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T extends { dataType: "a" | "b"; }>(template: T) => [T, any, any]
>    : ^ ^^^^^^^^^                        ^^        ^^ ^^^^^             
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

const [, ,] = bar({ dataType: 'a', day: 0 });
> : undefined
> : ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>bar({ dataType: 'a', day: 0 }) : [any, any, any]
>                               : ^^^^^^^^^^^^^^^
>bar : (template: { dataType: "a" | "b"; }) => [any, any, any]
>    : ^        ^^                        ^^^^^               
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

const [, , u] = bar({ dataType: 'a', day: 0 });
> : undefined
> : ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>u : any
>  : ^^^
>bar({ dataType: 'a', day: 0 }) : [any, any, any]
>                               : ^^^^^^^^^^^^^^^
>bar : (template: { dataType: "a" | "b"; }) => [any, any, any]
>    : ^        ^^                        ^^^^^               
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

const [a, b, c] = bar({ dataType: 'a', day: 0 });
>a : any
>  : ^^^
>b : any
>  : ^^^
>c : any
>  : ^^^
>bar({ dataType: 'a', day: 0 }) : [any, any, any]
>                               : ^^^^^^^^^^^^^^^
>bar : (template: { dataType: "a" | "b"; }) => [any, any, any]
>    : ^        ^^                        ^^^^^               
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

// These should still report legitimate type errors
const [, , invalid1] = foo({ dataType: 'invalid' });
> : undefined
> : ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>invalid1 : any
>         : ^^^
>foo({ dataType: 'invalid' }) : [{ dataType: "a" | "b"; }, any, any]
>                             : ^^^^^^^^^^^^^         ^^^^^^^^^^^^^^
>foo : <T extends { dataType: "a" | "b"; }>(template: T) => [T, any, any]
>    : ^ ^^^^^^^^^                        ^^        ^^ ^^^^^             
>{ dataType: 'invalid' } : { dataType: "invalid"; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "invalid"
>         : ^^^^^^^^^
>'invalid' : "invalid"
>          : ^^^^^^^^^

const [, , invalid2] = bar({ dataType: 'invalid' });
> : undefined
> : ^^^^^^^^^
> : undefined
> : ^^^^^^^^^
>invalid2 : any
>         : ^^^
>bar({ dataType: 'invalid' }) : [any, any, any]
>                             : ^^^^^^^^^^^^^^^
>bar : (template: { dataType: "a" | "b"; }) => [any, any, any]
>    : ^        ^^                        ^^^^^               
>{ dataType: 'invalid' } : { dataType: "invalid"; }
>                        : ^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "invalid"
>         : ^^^^^^^^^
>'invalid' : "invalid"
>          : ^^^^^^^^^

// Non-destructuring cases - generic function should work, non-generic should error
const result1 = foo({ dataType: 'a', day: 0 }); // OK - generic function
>result1 : [{ dataType: "a"; day: number; }, any, any]
>        : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo({ dataType: 'a', day: 0 }) : [{ dataType: "a"; day: number; }, any, any]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T extends { dataType: "a" | "b"; }>(template: T) => [T, any, any]
>    : ^ ^^^^^^^^^                        ^^        ^^ ^^^^^             
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

const result2 = bar({ dataType: 'a', day: 0 }); // Error - non-generic with excess property
>result2 : [any, any, any]
>        : ^^^^^^^^^^^^^^^
>bar({ dataType: 'a', day: 0 }) : [any, any, any]
>                               : ^^^^^^^^^^^^^^^
>bar : (template: { dataType: "a" | "b"; }) => [any, any, any]
>    : ^        ^^                        ^^^^^               
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

// Assignment destructuring should also work
let d, e, f: any;
>d : any
>  : ^^^
>e : any
>  : ^^^
>f : any
>  : ^^^

[d, e, f] = foo({ dataType: 'a', day: 0 });
>[d, e, f] = foo({ dataType: 'a', day: 0 }) : [{ dataType: "a"; day: number; }, any, any]
>                                           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[d, e, f] : [any, any, any]
>          : ^^^^^^^^^^^^^^^
>d : any
>  : ^^^
>e : any
>  : ^^^
>f : any
>  : ^^^
>foo({ dataType: 'a', day: 0 }) : [{ dataType: "a"; day: number; }, any, any]
>                               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>foo : <T extends { dataType: "a" | "b"; }>(template: T) => [T, any, any]
>    : ^ ^^^^^^^^^                        ^^        ^^ ^^^^^             
>{ dataType: 'a', day: 0 } : { dataType: "a"; day: number; }
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>dataType : "a"
>         : ^^^
>'a' : "a"
>    : ^^^
>day : number
>    : ^^^^^^
>0 : 0
>  : ^

